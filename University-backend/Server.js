// university-backend/server.js

// Load environment variables from .env file
require("dotenv").config();

// Import necessary packages
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");
const nodemailer = require("nodemailer"); // For sending emails (Contact form)
const slugify = require("slugify"); // Used in schema pre-save hooks, but good to ensure it's available

// Import Mongoose Models (Ensure these paths are correct relative to server.js)
const News = require("./models/News");
const Event = require("./models/Events");
const ContactMessage = require("./models/ContactMessage");
const Staff = require("./models/Staff");
const Course = require("./models/Course"); // Make sure this matches your file name 'Course.js'


// Import Routes (Ensure these paths are correct relative to server.js)
const authRoutes = require('./routes/auth');
const courseRoutes = require('./routes/Courses'); // Correctly importing your courses router!
const contactRoutes = require('./routes/Contact');
const staffRoutes = require('./routes/Staff');

// Create an Express application instance
const app = express();

// Middleware
app.use(express.json()); // Allows the server to parse JSON bodies from incoming requests
app.use(cors()); // Enable CORS for all routes

// Database Connection
const mongoURI = process.env.MONGO_URI;

mongoose
  .connect(mongoURI)
  .then(() => console.log("MongoDB connected successfully!"))
  .catch((err) => console.error("MongoDB connection error:", err));

// --- API Routes ---

// Basic Root Route (for testing if the server is running)
app.get("/", (req, res) => {
  res.send("University Backend API is running!");
});

// --- USE ROUTERS HERE ---
app.use('/api/auth', authRoutes); // Authentication routes
app.use('/api/courses', courseRoutes); // <--- NEW: Using your dedicated courses router!
app.use('/api/contact', contactRoutes);
app.use('/api/staff', staffRoutes);
app.use('/api/subjects', require('./routes/subjects'));
app.use('/api/student-auth', require('./routes/studentAuth'));
app.use('/api/students', require('./routes/students')); 
// --- News Routes (These are still defined directly in server.js, consider moving to ./routes/news.js later) ---

// GET all news articles (with optional filtering, pagination, search, and sorting)
// Example: /api/news?page=1&limit=5&sort=date:-1&search=university
app.get("/api/news", async (req, res) => {
  try {
    const { page = 1, limit = 10, sort = "createdAt:-1", search } = req.query; // Default values
    let query = {};

    // Search functionality
    if (search) {
      // Case-insensitive search on title and content
      query = {
        $or: [
          { title: { $regex: search, $options: "i" } },
          { content: { $regex: search, $options: "i" } },
        ],
      };
    }

    const sortOptions = {};
    const [sortBy, sortDirection] = sort.split(":");
    sortOptions[sortBy] = sortDirection === "-1" ? -1 : 1;

    const news = await News.find(query)
      .sort(sortOptions)
      .skip((page - 1) * limit)
      .limit(parseInt(limit));

    const totalNews = await News.countDocuments(query); // Get total count for pagination

    res.json({
      news,
      currentPage: parseInt(page),
      totalPages: Math.ceil(totalNews / limit),
      totalResults: totalNews,
    });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// GET a single news article by slug
app.get("/api/news/:slug", async (req, res) => {
  try {
    const newsItem = await News.findOne({ slug: req.params.slug });
    if (!newsItem) {
      return res.status(404).json({ message: "News article not found" });
    }
    res.json(newsItem);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// POST create a new news article (requires valid JSON body)
app.post("/api/news", async (req, res) => {
  // Slug will be automatically generated by the pre-save hook in the schema
  const news = new News({
    title: req.body.title,
    content: req.body.content,
    date: req.body.date || Date.now(), // Allow setting date or default to now
    imageURL: req.body.imageURL,
  });

  try {
    const newNews = await news.save();
    res.status(201).json(newNews); // 201 Created
  } catch (err) {
    // Handle validation errors (e.g., duplicate slug, missing required fields)
    res.status(400).json({ message: err.message });
  }
});

// PUT update a news article by ID
app.put("/api/news/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const updatedNews = await News.findByIdAndUpdate(id, req.body, {
      new: true,
      runValidators: true,
    }); // new: true returns the updated doc
    if (!updatedNews) {
      return res.status(404).json({ message: "News article not found" });
    }
    res.json(updatedNews);
  } catch (err) {
    res.status(400).json({ message: err.message }); // Validation errors or other update issues
  }
});

// DELETE a news article by ID
app.delete("/api/news/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const deletedNews = await News.findByIdAndDelete(id);
    if (!deletedNews) {
      return res.status(404).json({ message: "News article not found" });
    }
    res.json({ message: "News article deleted successfully" });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// --- Event Routes (These are still defined directly in server.js, consider moving to ./routes/events.js later) ---

// GET all events (with optional filtering, pagination, search, and sorting)
// Example: /api/events?page=1&limit=5&sort=date:1&filter=upcoming&search=seminar
app.get("/api/events", async (req, res) => {
  try {
    const { page = 1, limit = 10, sort = "date:1", search, filter } = req.query;
    let query = {};

    // Filter for upcoming events
    if (filter === "upcoming") {
      query.date = { $gte: new Date() }; // Events from today onwards
    } else if (filter === "past") {
      query.date = { $lt: new Date() }; // Events before today
    }

    // Search functionality
    if (search) {
      query = {
        ...query, // Keep existing date filter
        $or: [
          { title: { $regex: search, $options: "i" } },
          { description: { $regex: search, $options: "i" } },
          { location: { $regex: search, $options: "i" } },
        ],
      };
    }

    const sortOptions = {};
    const [sortBy, sortDirection] = sort.split(":");
    sortOptions[sortBy] = sortDirection === "-1" ? -1 : 1;

    const events = await Event.find(query)
      .sort(sortOptions)
      .skip((page - 1) * limit)
      .limit(parseInt(limit));

    const totalEvents = await Event.countDocuments(query);

    res.json({
      events,
      currentPage: parseInt(page),
      totalPages: Math.ceil(totalEvents / limit),
      totalResults: totalEvents,
    });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// GET a single event by slug
app.get("/api/events/:slug", async (req, res) => {
  try {
    const eventItem = await Event.findOne({ slug: req.params.slug });
    if (!eventItem) {
      return res.status(404).json({ message: "Event not found" });
    }
    res.json(eventItem);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// POST create a new event
app.post("/api/events", async (req, res) => {
  const event = new Event({
    title: req.body.title,
    description: req.body.description,
    date: req.body.date,
    location: req.body.location,
    imageURL: req.body.imageURL,
  });

  try {
    const newEvent = await event.save();
    res.status(201).json(newEvent);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// PUT update an event by ID
app.put("/api/events/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const updatedEvent = await Event.findByIdAndUpdate(id, req.body, {
      new: true,
      runValidators: true,
    });
    if (!updatedEvent) {
      return res.status(404).json({ message: "Event not found" });
    }
    res.json(updatedEvent);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// DELETE an event by ID
app.delete("/api/events/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const deletedEvent = await Event.findByIdAndDelete(id);
    if (!deletedEvent) {
      return res.status(404).json({ message: "Event not found" });
    }
    res.json({ message: "Event deleted successfully" });
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// --- Contact Message Routes (These are still defined directly in server.js, consider moving to ./routes/contact.js later) ---

// Setup Nodemailer transporter (replace with your actual email service details)
// This example uses Gmail. For production, consider SendGrid, Mailgun, etc.
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL_USER, // Your Gmail email address
    pass: process.env.EMAIL_PASS, // Your Gmail app password (NOT your regular password)
  },
});

// POST route for contact form submission
app.post("/api/contact", async (req, res) => {
  const { fullName, email, message } = req.body;

  if (!fullName || !email || !message) {
    return res.status(400).json({ message: "All fields are required." });
  }

  try {
    // 1. Save message to MongoDB
    const newContactMessage = new ContactMessage({
      fullName,
      email,
      message,
    });
    await newContactMessage.save();

    // 2. Send email notification (optional but recommended)
    const mailOptions = {
      from: process.env.EMAIL_USER, // Sender address
      to: process.env.ADMIN_EMAIL || process.env.EMAIL_USER, // Admin email or your own email
      subject: `New Contact Form Submission from ${fullName}`,
      html: `
        <p><strong>Name:</strong> ${fullName}</p>
        <p><strong>Email:</strong> ${email}</p>
        <p><strong>Message:</strong></p>
        <p>${message}</p>
      `,
    };

    await transporter.sendMail(mailOptions);
    console.log(`Email sent from ${fullName} (${email})`);

    res.status(200).json({ message: "Message sent successfully!" });
  } catch (err) {
    console.error("Error submitting contact form:", err);
    // Differentiate error types if possible
    if (err.name === "ValidationError") {
      res.status(400).json({ message: err.message });
    } else if (err.code === "EENVELOPE" || err.code === "EAUTH") {
      res
        .status(500)
        .json({ message: "Failed to send email. Check server configuration." });
    } else {
      res
        .status(500)
        .json({ message: "Server error. Please try again later." });
    }
  }
});

// --- Staff Routes (These are still defined directly in server.js, consider moving to ./routes/staff.js later) ---

// GET all staff members
app.get("/api/staff", async (req, res) => {
  try {
    const staff = await Staff.find();
    res.json(staff);
  } catch (err) {
    res.status(500).json({ message: err.message });
  }
});

// POST add a new staff member (requires valid JSON body)
app.post("/api/staff", async (req, res) => {
  const staffMember = new Staff({
    name: req.body.name,
    title: req.body.title,
    imageURL: req.body.imageURL,
  });

  try {
    const newStaffMember = await staffMember.save();
    res.status(201).json(newStaffMember);
  } catch (err) {
    res.status(400).json({ message: err.message });
  }
});

// --- Calendar Items Route (for /api/calendar-items) ---

app.get("/api/calendar-items", async (req, res) => {
  try {
    // Fetch news items, projecting only date, slug, and adding a 'type'
    const newsItems = await News.find({}, "date slug").lean(); // .lean() for plain JS objects
    const formattedNews = newsItems.map((item) => ({
      date: item.date.toISOString().split("T")[0], // Format to YYYY-MM-DD
      slug: item.slug,
      type: "news",
    }));

    // Fetch event items, projecting only date, slug, and adding a 'type'
    const eventItems = await Event.find({}, "date slug").lean(); // Assuming Event also has a slug
    const formattedEvents = eventItems.map((item) => ({
      date: item.date.toISOString().split("T")[0], // Format to YYYY-MM-DD
      slug: item.slug,
      type: "events",
    }));

    // Combine and send back
    const allCalendarItems = [...formattedNews, ...formattedEvents];
    res.json(allCalendarItems);
  } catch (err) {
    console.error("Error fetching calendar items:", err);
    res.status(500).json({ message: "Failed to fetch calendar data." });
  }
});

// Define the port to listen on
const PORT = process.env.PORT || 5000;

// Start the server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});